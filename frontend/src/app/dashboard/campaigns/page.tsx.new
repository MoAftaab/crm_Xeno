'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/hooks/useAuth';
import { useCampaigns } from '@/hooks/useCampaigns';
import { Campaign } from '@/services/campaign-service';
import { PlusCircle, Search, Calendar, Activity, CheckCircle, Sparkles, Clock, AlertCircle, Trash2, ChevronRight, Loader2, Send, Filter, ChevronDown, Users } from 'lucide-react';

export default function CampaignsPage() {
  const router = useRouter();
  const { user } = useAuth();
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const { getCampaigns, launchCampaign, deleteCampaign } = useCampaigns();
  const campaignsQuery = getCampaigns();
  
  // Redirect if not authenticated
  useEffect(() => {
    if (!user) {
      router.push('/login');
    }
  }, [user, router]);

  // Filter campaigns based on search and status
  const filteredCampaigns = campaignsQuery.data?.filter((campaign: Campaign) => {
    const matchesSearch = !searchQuery || 
      campaign.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (campaign.description?.toLowerCase().includes(searchQuery.toLowerCase()) || false);
    
    const matchesStatus = statusFilter === 'all' || campaign.status === statusFilter;
    
    return matchesSearch && matchesStatus;
  }) || [];

  // Handle campaign launch
  const handleLaunchCampaign = (id: string) => {
    launchCampaign().mutate(id);
  };

  // Handle campaign delete
  const handleDeleteCampaign = (id: string) => {
    if (confirm('Are you sure you want to delete this campaign?')) {
      deleteCampaign().mutate(id);
    }
  };

  // Get status badge styling
  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'draft':
        return (
          <div className="flex items-center">
            <Clock className="w-4 h-4 text-gray-500 mr-1" />
            <span className="text-gray-500">Draft</span>
          </div>
        );
      case 'scheduled':
        return (
          <div className="flex items-center">
            <Clock className="w-4 h-4 text-blue-500 mr-1" />
            <span className="text-blue-500">Scheduled</span>
          </div>
        );
      case 'active':
        return (
          <div className="flex items-center">
            <CheckCircle className="w-4 h-4 text-green-500 mr-1" />
            <span className="text-green-500">Active</span>
          </div>
        );
      case 'completed':
        return (
          <div className="flex items-center">
            <CheckCircle className="w-4 h-4 text-green-700 mr-1" />
            <span className="text-green-700">Completed</span>
          </div>
        );
      case 'failed':
        return (
          <div className="flex items-center">
            <AlertCircle className="w-4 h-4 text-red-500 mr-1" />
            <span className="text-red-500">Failed</span>
          </div>
        );
      default:
        return (
          <div className="flex items-center">
            <Activity className="w-4 h-4 text-gray-500 mr-1" />
            <span className="text-gray-500">{status}</span>
          </div>
        );
    }
  };
  
  // Loading state
  if (campaignsQuery.isLoading) {
    return (
      <div className="w-full flex items-center justify-center py-24">
        <Loader2 className="w-6 h-6 text-[#141414] animate-spin" />
        <span className="ml-2 text-[#141414]">Loading campaigns...</span>
      </div>
    );
  }

  // Error state
  if (campaignsQuery.isError) {
    return (
      <div className="w-full flex flex-col items-center justify-center py-24">
        <AlertCircle className="w-10 h-10 text-red-500 mb-2" />
        <h2 className="text-xl font-medium text-[#141414]">Failed to load campaigns</h2>
        <p className="text-[#737373]">Please try again later</p>
      </div>
    );
  }

  return (
    <div className="space-y-6 text-[#141414]">
      {/* Page Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-[#141414]">Campaigns</h1>
          <p className="text-sm text-[#737373] mt-1">Create and manage marketing campaigns</p>
        </div>
        <button 
          onClick={() => router.push('/dashboard/campaigns/create')}
          className="bg-black hover:bg-gray-800 text-white px-4 py-2 rounded-lg transition-colors flex items-center">
          <PlusCircle className="mr-2 w-4 h-4" />
          Create Campaign
        </button>
      </div>

      {/* Search and Filter Controls */}
      <div className="flex flex-col md:flex-row gap-3 items-start md:items-center">
        <div className="relative w-full md:w-auto md:flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <input
            type="text"
            placeholder="Search campaigns..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="bg-white border border-[#dbdbdb] py-2 pl-10 pr-4 rounded-lg w-full focus:outline-none focus:ring-1 focus:ring-black focus:border-black transition-colors"
          />
        </div>
        
        <div className="relative">
          <button 
            className="flex items-center gap-2 px-4 py-2 bg-white border border-[#dbdbdb] rounded-lg"
            onClick={() => document.getElementById('statusDropdown')?.classList.toggle('hidden')}
          >
            <span className="text-sm font-medium">{statusFilter === 'all' ? 'All Status' : statusFilter.charAt(0).toUpperCase() + statusFilter.slice(1)}</span>
            <ChevronDown className="w-4 h-4 text-[#737373]" />
          </button>
          
          <div id="statusDropdown" className="absolute z-10 hidden mt-1 w-36 rounded-lg bg-white border border-[#dbdbdb] shadow-lg">
            <div className="p-1">
              <button 
                onClick={() => { setStatusFilter('all'); document.getElementById('statusDropdown')?.classList.add('hidden'); }}
                className="w-full text-left px-3 py-2 text-sm rounded-md hover:bg-gray-100">
                All Status
              </button>
              <button 
                onClick={() => { setStatusFilter('draft'); document.getElementById('statusDropdown')?.classList.add('hidden'); }}
                className="w-full text-left px-3 py-2 text-sm rounded-md hover:bg-gray-100">
                Draft
              </button>
              <button 
                onClick={() => { setStatusFilter('scheduled'); document.getElementById('statusDropdown')?.classList.add('hidden'); }}
                className="w-full text-left px-3 py-2 text-sm rounded-md hover:bg-gray-100">
                Scheduled
              </button>
              <button 
                onClick={() => { setStatusFilter('active'); document.getElementById('statusDropdown')?.classList.add('hidden'); }}
                className="w-full text-left px-3 py-2 text-sm rounded-md hover:bg-gray-100">
                Active
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Campaigns Table */}
      {filteredCampaigns.length === 0 ? (
        <div className="py-16 flex flex-col items-center justify-center bg-white rounded-lg border border-[#dbdbdb]">
          <Sparkles className="w-10 h-10 text-gray-300 mb-2" />
          <h3 className="text-lg font-medium text-[#141414]">No campaigns found</h3>
          <p className="text-[#737373] mt-1 text-center max-w-sm">
            {searchQuery || statusFilter !== 'all'
              ? 'Try adjusting your search or filters to find what you're looking for'
              : 'Get started by creating your first campaign'}
          </p>
          {!searchQuery && statusFilter === 'all' && (
            <button
              onClick={() => router.push('/dashboard/campaigns/create')}
              className="mt-4 px-4 py-2 bg-black text-white rounded-lg flex items-center">
              <PlusCircle className="w-4 h-4 mr-2" />
              Create Campaign
            </button>
          )}
        </div>
      ) : (
        <div className="bg-white border border-[#dbdbdb] rounded-lg overflow-hidden">
          {/* Table Header */}
          <div className="grid grid-cols-12 px-4 py-3 bg-gray-50 text-xs uppercase font-medium text-[#737373] border-b border-[#dbdbdb]">
            <div className="col-span-4">CAMPAIGN</div>
            <div className="col-span-1 text-center">STATUS</div>
            <div className="col-span-2">AUDIENCE</div>
            <div className="col-span-2">SCHEDULE</div>
            <div className="col-span-2">PERFORMANCE</div>
            <div className="col-span-1 text-center">ACTIONS</div>
          </div>
          
          {/* Campaigns Rows */}
          <div className="divide-y divide-[#dbdbdb]">
            {filteredCampaigns.map((campaign) => (
              <div key={campaign.id} className="grid grid-cols-12 px-4 py-4 items-center hover:bg-gray-50">
                <div className="col-span-4 flex items-center space-x-3">
                  <input type="checkbox" className="rounded border-gray-300" />
                  <div>
                    <h3 className="font-medium text-[#141414] hover:underline cursor-pointer" 
                      onClick={() => router.push(`/dashboard/campaigns/${campaign.id}`)}>
                      {campaign.name}
                    </h3>
                    <p className="text-sm text-[#737373]">{campaign.description || 'No description'}</p>
                  </div>
                </div>
                <div className="col-span-1 flex justify-center">
                  {getStatusBadge(campaign.status)}
                </div>
                <div className="col-span-2">
                  <div className="flex items-center text-sm text-[#141414]">
                    <Users className="w-4 h-4 mr-1 text-[#737373]" /> 
                    {campaign.segment?.name || 'All Customers'}
                    <span className="ml-1 text-[#737373]">
                      ({campaign.recipients || 0})
                    </span>
                  </div>
                </div>
                <div className="col-span-2">
                  {campaign.scheduledAt ? (
                    <div className="flex items-center text-sm text-[#141414]">
                      <Calendar className="w-4 h-4 mr-1 text-[#737373]" />
                      {new Date(campaign.scheduledAt).toLocaleDateString()}
                    </div>
                  ) : (
                    <div className="text-sm text-[#737373]">No data yet</div>
                  )}
                </div>
                <div className="col-span-2">
                  {campaign.status === 'active' || campaign.status === 'completed' ? (
                    <div className="space-y-1">
                      <div className="text-sm">
                        <span className="font-medium">Open rate:</span> {campaign.openRate || '0%'}
                      </div>
                      <div className="text-sm">
                        <span className="font-medium">Click rate:</span> {campaign.clickRate || '0%'}
                      </div>
                    </div>
                  ) : (
                    <div className="text-sm text-[#737373]">No data yet</div>
                  )}
                </div>
                <div className="col-span-1 flex items-center justify-center space-x-2">
                  {campaign.status === 'draft' && (
                    <button
                      onClick={() => handleLaunchCampaign(campaign.id)}
                      className="p-1.5 rounded-full hover:bg-gray-100">
                      <Send className="w-4 h-4 text-[#141414]" />
                    </button>
                  )}
                  <button
                    onClick={() => handleDeleteCampaign(campaign.id)} 
                    className="p-1.5 rounded-full hover:bg-gray-100">
                    <Trash2 className="w-4 h-4 text-red-500" />
                  </button>
                  <button
                    onClick={() => router.push(`/dashboard/campaigns/${campaign.id}`)}
                    className="p-1.5 rounded-full hover:bg-gray-100">
                    <ChevronRight className="w-4 h-4 text-[#141414]" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      
      {/* Pagination */}
      {filteredCampaigns.length > 0 && (
        <div className="flex justify-between items-center text-sm text-[#737373] py-2">
          <div>
            Showing {filteredCampaigns.length} of {campaignsQuery.data?.length || 0} campaigns
          </div>
          <div className="flex items-center">
            <button disabled className="px-3 py-1 border border-[#dbdbdb] rounded-l-md bg-gray-50">Previous</button>
            <button className="px-3 py-1 border-t border-b border-[#dbdbdb] bg-black text-white">1</button>
            <button disabled className="px-3 py-1 border border-[#dbdbdb] rounded-r-md">Next</button>
          </div>
        </div>
      )}
    </div>
  );
}
